// Code generated by protoc-gen-go.
// source: punchclock.proto
// DO NOT EDIT!

package beans

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TimeStruct struct {
	Year   string `protobuf:"bytes,1,opt,name=Year"          json:"year"`
	Month  string `protobuf:"bytes,2,opt,name=Month"         json:"month"`
	Day    string `protobuf:"bytes,3,opt,name=Day"           json:"day"`
	Hour   string `protobuf:"bytes,4,opt,name=Hour"          json:"hour"`
	Minute string `protobuf:"bytes,5,opt,name=Minute"        json:"minute"`
	Second string `protobuf:"bytes,6,opt,name=Second"        json:"second"`
}

func (m *TimeStruct) Reset()                    { *m = TimeStruct{} }
func (m *TimeStruct) String() string            { return proto.CompactTextString(m) }
func (*TimeStruct) ProtoMessage()               {}
func (*TimeStruct) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *TimeStruct) GetYear() string {
	if m != nil {
		return m.Year
	}
	return ""
}

func (m *TimeStruct) GetMonth() string {
	if m != nil {
		return m.Month
	}
	return ""
}

func (m *TimeStruct) GetDay() string {
	if m != nil {
		return m.Day
	}
	return ""
}

func (m *TimeStruct) GetHour() string {
	if m != nil {
		return m.Hour
	}
	return ""
}

func (m *TimeStruct) GetMinute() string {
	if m != nil {
		return m.Minute
	}
	return ""
}

func (m *TimeStruct) GetSecond() string {
	if m != nil {
		return m.Second
	}
	return ""
}

type Punchclock struct {
	Begin *TimeStruct `protobuf:"bytes,7,opt,name=Begin"         json:"begin"`
	End   *TimeStruct `protobuf:"bytes,8,opt,name=End"           json:"end"`
}

func (m *Punchclock) Reset()                    { *m = Punchclock{} }
func (m *Punchclock) String() string            { return proto.CompactTextString(m) }
func (*Punchclock) ProtoMessage()               {}
func (*Punchclock) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Punchclock) GetBegin() *TimeStruct {
	if m != nil {
		return m.Begin
	}
	return nil
}

func (m *Punchclock) GetEnd() *TimeStruct {
	if m != nil {
		return m.End
	}
	return nil
}

type EmployeeOnChain struct {
	Class     string `protobuf:"bytes,9,opt,name=Class"         json:"$class"       form:"$class"`
	Identify  string `protobuf:"bytes,10,opt,name=Identify"     json:"identify"     form:"identify"`
	FirstName string `protobuf:"bytes,11,opt,name=FirstName"    json:"firstName"    form:"firstName"`
	LastName  string `protobuf:"bytes,12,opt,name=LastName"     json:"lastName"     form:"lastName"`
}

func (m *EmployeeOnChain) Reset()                    { *m = EmployeeOnChain{} }
func (m *EmployeeOnChain) String() string            { return proto.CompactTextString(m) }
func (*EmployeeOnChain) ProtoMessage()               {}
func (*EmployeeOnChain) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *EmployeeOnChain) GetClass() string {
	if m != nil {
		return m.Class
	}
	return ""
}

func (m *EmployeeOnChain) GetIdentify() string {
	if m != nil {
		return m.Identify
	}
	return ""
}

func (m *EmployeeOnChain) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *EmployeeOnChain) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

type PunchclockOnChain struct {
	Class       string `protobuf:"bytes,13,opt,name=Class"        json:"$class"       form:"$class"`
	ID          string `protobuf:"bytes,14,opt,name=ID"           json:"id"           form:"id"`
	OnWorkDate  string `protobuf:"bytes,15,opt,name=OnWorkDate"   json:"onWorkDate"   form:"onWorkDate"`
	OnWorkTime  string `protobuf:"bytes,16,opt,name=OnWorkTime"   json:"onWorkTime"   form:"onWorkTime"`
	OffWorkTime string `protobuf:"bytes,17,opt,name=OffWorkTime"  json:"offWorkTime"  form:"offWorkTime"`
	WorkTimes   string `protobuf:"bytes,18,opt,name=WorkTimes"    json:"workTimes"    form:"workTimes"`
	Employee    string `protobuf:"bytes,19,opt,name=Employee"     json:"employee"     form:"employee"`
}

func (m *PunchclockOnChain) Reset()                    { *m = PunchclockOnChain{} }
func (m *PunchclockOnChain) String() string            { return proto.CompactTextString(m) }
func (*PunchclockOnChain) ProtoMessage()               {}
func (*PunchclockOnChain) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *PunchclockOnChain) GetClass() string {
	if m != nil {
		return m.Class
	}
	return ""
}

func (m *PunchclockOnChain) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *PunchclockOnChain) GetOnWorkDate() string {
	if m != nil {
		return m.OnWorkDate
	}
	return ""
}

func (m *PunchclockOnChain) GetOnWorkTime() string {
	if m != nil {
		return m.OnWorkTime
	}
	return ""
}

func (m *PunchclockOnChain) GetOffWorkTime() string {
	if m != nil {
		return m.OffWorkTime
	}
	return ""
}

func (m *PunchclockOnChain) GetWorkTimes() string {
	if m != nil {
		return m.WorkTimes
	}
	return ""
}

func (m *PunchclockOnChain) GetEmployee() string {
	if m != nil {
		return m.Employee
	}
	return ""
}

type DailyPunchclockData struct {
	Employee   *EmployeeOnChain `protobuf:"bytes,20,opt,name=Employee"     json:"employee"     form:"employee"`
	Punchclock *Punchclock      `protobuf:"bytes,21,opt,name=Punchclock"   json:"punchclock"   form:"punchclock"`
}

func (m *DailyPunchclockData) Reset()                    { *m = DailyPunchclockData{} }
func (m *DailyPunchclockData) String() string            { return proto.CompactTextString(m) }
func (*DailyPunchclockData) ProtoMessage()               {}
func (*DailyPunchclockData) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *DailyPunchclockData) GetEmployee() *EmployeeOnChain {
	if m != nil {
		return m.Employee
	}
	return nil
}

func (m *DailyPunchclockData) GetPunchclock() *Punchclock {
	if m != nil {
		return m.Punchclock
	}
	return nil
}

func init() {
	proto.RegisterType((*TimeStruct)(nil), "beans.TimeStruct")
	proto.RegisterType((*Punchclock)(nil), "beans.Punchclock")
	proto.RegisterType((*EmployeeOnChain)(nil), "beans.EmployeeOnChain")
	proto.RegisterType((*PunchclockOnChain)(nil), "beans.PunchclockOnChain")
	proto.RegisterType((*DailyPunchclockData)(nil), "beans.DailyPunchclockData")
}

func init() { proto.RegisterFile("punchclock.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 391 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xdf, 0x6a, 0xe2, 0x40,
	0x14, 0xc6, 0x89, 0x1a, 0x57, 0x8f, 0xbb, 0xfe, 0x19, 0x5d, 0x39, 0x2c, 0xcb, 0x22, 0xd9, 0x8b,
	0xf5, 0x4a, 0x58, 0xfb, 0x06, 0x35, 0x96, 0x0a, 0xb5, 0x16, 0x2d, 0x94, 0xf6, 0x6e, 0x8c, 0x63,
	0x0d, 0xc6, 0x19, 0x49, 0x26, 0x17, 0x81, 0xf6, 0x0d, 0xfa, 0x7a, 0x7d, 0x9f, 0x32, 0x33, 0xe6,
	0x4f, 0x5b, 0x7a, 0x77, 0xbe, 0xdf, 0x77, 0x4e, 0x38, 0x5f, 0xce, 0x40, 0xfb, 0x18, 0x73, 0x6f,
	0xe7, 0x05, 0xc2, 0xdb, 0x8f, 0x8e, 0xa1, 0x90, 0x82, 0xd8, 0x6b, 0x46, 0x79, 0xe4, 0xbc, 0x58,
	0x00, 0xb7, 0xfe, 0x81, 0xad, 0x64, 0x18, 0x7b, 0x92, 0x10, 0xa8, 0xdc, 0x33, 0x1a, 0xa2, 0x35,
	0xb0, 0x86, 0xf5, 0xa5, 0xae, 0x49, 0x0f, 0xec, 0xb9, 0xe0, 0x72, 0x87, 0x25, 0x0d, 0x8d, 0x20,
	0x6d, 0x28, 0xbb, 0x34, 0xc1, 0xb2, 0x66, 0xaa, 0x54, 0xb3, 0x97, 0x22, 0x0e, 0xb1, 0x62, 0x66,
	0x55, 0x4d, 0xfa, 0x50, 0x9d, 0xfb, 0x3c, 0x96, 0x0c, 0x6d, 0x4d, 0x4f, 0x4a, 0xf1, 0x15, 0xf3,
	0x04, 0xdf, 0x60, 0xd5, 0x70, 0xa3, 0x9c, 0x07, 0x80, 0x9b, 0x6c, 0x53, 0xf2, 0x0f, 0xec, 0x73,
	0xf6, 0xe8, 0x73, 0xfc, 0x36, 0xb0, 0x86, 0x8d, 0x71, 0x67, 0xa4, 0x77, 0x1e, 0xe5, 0xfb, 0x2e,
	0x8d, 0x4f, 0xfe, 0x42, 0x79, 0xca, 0x37, 0x58, 0xfb, 0xaa, 0x4d, 0xb9, 0xce, 0x33, 0xb4, 0xa6,
	0x87, 0x63, 0x20, 0x12, 0xc6, 0x16, 0x7c, 0xb2, 0xa3, 0x3e, 0x57, 0xd1, 0x26, 0x01, 0x8d, 0x22,
	0xac, 0x9b, 0x68, 0x5a, 0x90, 0x5f, 0x50, 0x9b, 0x6d, 0x18, 0x97, 0xfe, 0x36, 0x41, 0xd0, 0x46,
	0xa6, 0xc9, 0x6f, 0xa8, 0x5f, 0xf8, 0x61, 0x24, 0xaf, 0xe9, 0x81, 0x61, 0x43, 0x9b, 0x39, 0x50,
	0x93, 0x57, 0xf4, 0x64, 0x7e, 0x37, 0x93, 0xa9, 0x76, 0x5e, 0x2d, 0xe8, 0xe4, 0xd9, 0x3e, 0x6d,
	0xf0, 0xa3, 0xb8, 0x41, 0x13, 0x4a, 0x33, 0x17, 0x9b, 0x1a, 0x95, 0x66, 0x2e, 0xf9, 0x03, 0xb0,
	0xe0, 0x77, 0x22, 0xdc, 0xbb, 0x54, 0x32, 0x6c, 0x69, 0x5e, 0x20, 0xb9, 0xaf, 0x32, 0x63, 0xbb,
	0xe8, 0x2b, 0x42, 0x06, 0xd0, 0x58, 0x6c, 0xb7, 0x59, 0x43, 0x47, 0x37, 0x14, 0x91, 0xca, 0x95,
	0xd6, 0x11, 0x12, 0x93, 0x2b, 0x03, 0x2a, 0x57, 0xfa, 0xeb, 0xb0, 0x6b, 0x72, 0xa5, 0xda, 0x79,
	0x82, 0xae, 0x4b, 0xfd, 0x20, 0xc9, 0xb3, 0xb9, 0x54, 0x52, 0x32, 0x2e, 0x8c, 0xf4, 0xf4, 0x5d,
	0xfa, 0xa7, 0xbb, 0x7c, 0x38, 0x42, 0xfe, 0x29, 0xf2, 0xbf, 0x78, 0x7d, 0xfc, 0xf9, 0xee, 0x9a,
	0xb9, 0xb1, 0x2c, 0x34, 0xad, 0xab, 0xfa, 0x35, 0x9f, 0xbd, 0x05, 0x00, 0x00, 0xff, 0xff, 0xc8,
	0xcd, 0x1e, 0xde, 0xe1, 0x02, 0x00, 0x00,
}
